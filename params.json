{"name":"Concourse","tagline":"An Event-Sourcing Framework for Java 8","body":"# concourse\r\n\r\n[![Build Status](https://travis-ci.org/opencredo/concourse.svg?branch=master)](https://travis-ci.org/opencredo/concourse)\r\n\r\n_Concourse_ is a Java 8 framework for building applications that use CQRS and event sourcing patterns, with a Cassandra event log implementation.\r\n\r\nEvents are defined using methods on Java interfaces, like so:\r\n\r\n```java\r\n@HandlesEventsFor(\"person\")\r\npublic interface PersonEvents {\r\n\r\n    void created(StreamTimestamp ts, UUID personId, String name, LocalDate dateOfBirth);\r\n    void changedName(StreamTimestamp ts, UUID personId, String newName);\r\n    void phoneNumberAdded(StreamTimestamp ts, UUID personId, UUID phoneNumberId, String phoneNumber, String description);\r\n  \r\n    void phoneNumberChanged(StreamTimestamp ts, UUID personId, UUID phoneNumberId, String newPhoneNumber);\r\n    \r\n    @Name(name=\"phoneNumberChanged\", version=\"2\")\r\n    void phoneNumberChanged(StreamTimestamp ts, UUID personId, UUID phoneNumberId, String newPhoneNumber, String newDescription);\r\n    \r\n    void phoneNumberRemoved(StreamTimestamp ts, UUID personId, UUID phoneNumberId);\r\n    void deleted(StreamTimestamp ts, UUID personId);\r\n    \r\n}\r\n```\r\n\r\nWe send events to an `EventBus` by getting a dispatcher for the desired interface:\r\n\r\n```java\r\neventBus.dispatch(PersonEvents.class, events ->\r\n    events.phoneNumberChanged(ts, personId, phoneNumberId, \"0898505050\", \"work phone\"));\r\n```\r\n\r\nEvents are recorded in the event log and then published to event handlers which can update query-optimised views or propagate integration events out to the wider system.\r\n\r\nTo retrieve the state of an entity, we replay its event history, typically to an object that builds up a picture of its current state:\r\n\r\n```java\r\n@HandlesEventsFor(\"person\")\r\npublic final class PersonState {\r\n\r\n    @HandlesEvent\r\n    public static PersonState created(UUID id, String name, LocalDate dateOfBirth) {\r\n        return new PersonState(id, name, dateOfBirth);\r\n    }\r\n    \r\n    private final UUID id;\r\n    private String name;\r\n    private final LocalDate dateOfBirth;\r\n    private final Map<UUID, String[]> phoneNumbers = new HashMap<>();\r\n    private boolean isDeleted = false;\r\n    \r\n    private PersonState(UUID id, String name, LocalDate dateOfBirth) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.dateOfBirth = dateOfBirth;\r\n    }\r\n    \r\n    @HandlesEvent\r\n    public void changedName(String newName) {\r\n        name = newName;\r\n    }\r\n    \r\n    @HandlesEvent\r\n    public void phoneNumberAdded(UUID phoneNumberId, String phoneNumber, String description) {\r\n        phoneNumbers.put(phoneNumberId, new String[] { phoneNumber, description });\r\n    }\r\n    \r\n    @HandlesEvent\r\n    public void phoneNumberChanged(UUID phoneNumberId, String newPhoneNumber) {\r\n        phoneNumbers.computeIfAbsent(phoneNumberId, id -> new String[] { \"\", \"\" })[0] = newPhoneNumber;\r\n    }\r\n    \r\n    @HandlesEvent(name=\"phoneNumberChanged\", version=\"2\")\r\n    public void phoneNumberChanged(UUID phoneNumberId, String newPhoneNumber, String newDescription) {\r\n        String[] phoneNumberDetails = phoneNumbers.computeIfAbsent(phoneNumberId, id -> new String[2]);\r\n        phoneNumberDetails[0] = newPhoneNumber;\r\n        phoneNumberDetails[1] = newDescription;\r\n    }\r\n    \r\n    @HandlesEvent\r\n    public void phoneNumberRemoved(UUID phoneNumberId) {\r\n        phoneNumbers.remove(phoneNumberId);\r\n    }\r\n    \r\n    @HandlesEvent\r\n    public void deleted() {\r\n        isDeleted = true;\r\n    }\r\n    \r\n    // getters go here\r\n}\r\n\r\nOptional<PersonState> personState = StateBuilder.forStateClass(PersonState.class)\r\n    .buildState(eventSource, personId)\r\n    .filter(p -> !p.isDeleted());\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}